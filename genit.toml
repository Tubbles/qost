[variable]
src = "{root}/src"
scripts = "{root}/scripts"
modules = "{src}/modules"
doctest = "{modules}/doctest"
fmt = "{modules}/fmt"
lua = "{modules}/lua"
magic_enum = "{modules}/magic_enum"
wasmer = "{modules}/wasmer/wasmer-linux-amd64"
common_compile_flags = [
    "-fdiagnostics-color=always",
    "-flto",

    "-Wall",
    "-Wextra",
    "-Wshadow",
    "-pedantic",
    "-Wcast-align",
    "-Wunused",
    "-Wconversion",
    "-Wsign-conversion",
    "-Wmisleading-indentation",
    "-Wduplicated-cond",
    "-Wduplicated-branches",
    "-Wlogical-op",
    "-Wnull-dereference",
    "-Wuseless-cast",
    "-Wdouble-promotion",
    "-Wformat=2",
    "-Wimplicit-fallthrough",

    "-D_FORTIFY_SOURCE=2",
    "-D_GLIBCXX_ASSERTIONS",

    "-I {doctest}",
    "-I {fmt}/include",
    "-I {lua}",
    "-I {magic_enum}/include",
    "-I {wasmer}/include",
]
common_c_flags = [
    "--std=c23",
    "{common_compile_flags}",
    #
]
common_cxx_flags = [
    "--std=c++23",
    "{common_compile_flags}",
    "-Wnon-virtual-dtor",
    "-Wold-style-cast",
    "-Woverloaded-virtual",
]
common_ld_flags = [
    "-fdiagnostics-color=always",
    "-flto",

    "-L {lua}",
    "-l:liblua.a",
    "-L {fmt}/build",
    "-l:libfmt.a",
    "-L {wasmer}/lib",
    "-l:libwasmer.a",
    #
]

[profile.debug.variable]
cflags = [
    "-Og",
    "-g",
    "-fsanitize=address",
    "-fsanitize=undefined",
    "-DDEBUG",
    "{common_c_flags}",
    #
]
cxxflags = [
    "-Og",
    "-g",
    "-fsanitize=address",
    "-fsanitize=undefined",
    "-DDEBUG",
    "{common_cxx_flags}",
    #
]
ldflags = [
    "-Og",
    "-g",
    "-fsanitize=address",
    "-fsanitize=undefined",
    "-DDEBUG",
    "{common_ld_flags}",
    #
]

[profile.optimized.variable]
cflags = [
    "-s",
    "-O3",
    "{common_c_flags}",
    #
]
cxxflags = [
    "-s",
    "-O3",
    "{common_cxx_flags}",
    #
]
ldflags = [
    "-s",
    "-O3",
    "{common_ld_flags}",
    #
]

[rule.cc]
command = "g++ -MD -MF {out}.d {cflags} -c -o {out} {in}"
depfile = "{out}.d"
deps = "gcc"

[rule.cxx]
command = "g++ -MD -MF {out}.d {cxxflags} -c -o {out} {in}"
depfile = "{out}.d"
deps = "gcc"

[rule.ld]
command = "g++ -o {out} {in} {ldflags}" # Flag ordering here is important for ld

[binary."{build_dir}/quest-on-saer-tor"]
rule = "ld"
dependencies = [
    { rule = "cxx", files = [
        "{src}/main.cc",
        #
    ] },
]
implicit_dependencies = [
    { files = [
        "{lua}/liblua.a",
        "{fmt}/build/libfmt.a",
        "{wasmer}/lib/libwasmer.a",
        #
    ] },
]
